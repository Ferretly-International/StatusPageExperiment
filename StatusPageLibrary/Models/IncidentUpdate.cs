/*
 * Statuspage API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace StatusPageLibrary.Models
{ 
    /// <summary>
    /// Update a previous incident update
    /// </summary>
    [DataContract]
    public class IncidentUpdate
    {
        /// <summary>
        /// Incident Update Identifier.
        /// </summary>
        /// <value>Incident Update Identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Incident Identifier.
        /// </summary>
        /// <value>Incident Identifier.</value>
        [DataMember(Name="incident_id", EmitDefaultValue=false)]
        public string IncidentId { get; set; }

        /// <summary>
        /// Affected components associated with the incident update.
        /// </summary>
        /// <value>Affected components associated with the incident update.</value>
        [DataMember(Name="affected_components", EmitDefaultValue=false)]
        public List<Object> AffectedComponents { get; set; }

        /// <summary>
        /// Incident update body.
        /// </summary>
        /// <value>Incident update body.</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// The timestamp when the incident update was created at.
        /// </summary>
        /// <value>The timestamp when the incident update was created at.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// An optional customized tweet message for incident postmortem.
        /// </summary>
        /// <value>An optional customized tweet message for incident postmortem.</value>
        [DataMember(Name="custom_tweet", EmitDefaultValue=false)]
        public string CustomTweet { get; set; }

        /// <summary>
        /// Controls whether to delivery notifications.
        /// </summary>
        /// <value>Controls whether to delivery notifications.</value>
        [DataMember(Name="deliver_notifications", EmitDefaultValue=false)]
        public bool DeliverNotifications { get; set; }

        /// <summary>
        /// Timestamp when incident update is happened.
        /// </summary>
        /// <value>Timestamp when incident update is happened.</value>
        [DataMember(Name="display_at", EmitDefaultValue=false)]
        public DateTime DisplayAt { get; set; }


        /// <summary>
        /// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
        /// </summary>
        /// <value>The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.</value>
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum InvestigatingEnum for investigating
            /// </summary>
            Investigating = 1,
            
            /// <summary>
            /// Enum IdentifiedEnum for identified
            /// </summary>
            Identified = 2,
            
            /// <summary>
            /// Enum MonitoringEnum for monitoring
            /// </summary>
            Monitoring = 3,
            
            /// <summary>
            /// Enum ResolvedEnum for resolved
            /// </summary>
            Resolved = 4,
            
            /// <summary>
            /// Enum ScheduledEnum for scheduled
            /// </summary>
            Scheduled = 5,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            InProgress = 6,
            
            /// <summary>
            /// Enum VerifyingEnum for verifying
            /// </summary>
            Verifying = 7,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            Completed = 8
        }

        /// <summary>
        /// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
        /// </summary>
        /// <value>The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Tweet identifier associated to this incident update.
        /// </summary>
        /// <value>Tweet identifier associated to this incident update.</value>
        [DataMember(Name="tweet_id", EmitDefaultValue=false)]
        public string TweetId { get; set; }

        /// <summary>
        /// The timestamp when twitter updated at.
        /// </summary>
        /// <value>The timestamp when twitter updated at.</value>
        [DataMember(Name="twitter_updated_at", EmitDefaultValue=false)]
        public DateTime TwitterUpdatedAt { get; set; }

        /// <summary>
        /// The timestamp when the incident update is updated.
        /// </summary>
        /// <value>The timestamp when the incident update is updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Controls whether to create twitter update.
        /// </summary>
        /// <value>Controls whether to create twitter update.</value>
        [DataMember(Name="wants_twitter_update", EmitDefaultValue=false)]
        public bool WantsTwitterUpdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncidentUpdate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncidentId: ").Append(IncidentId).Append("\n");
            sb.Append("  AffectedComponents: ").Append(AffectedComponents).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomTweet: ").Append(CustomTweet).Append("\n");
            sb.Append("  DeliverNotifications: ").Append(DeliverNotifications).Append("\n");
            sb.Append("  DisplayAt: ").Append(DisplayAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TweetId: ").Append(TweetId).Append("\n");
            sb.Append("  TwitterUpdatedAt: ").Append(TwitterUpdatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WantsTwitterUpdate: ").Append(WantsTwitterUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, 
                new JsonSerializerOptions
                {
                    DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
                    WriteIndented = true
                });
        }
    }
}
